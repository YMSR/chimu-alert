generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum NotificationFrequency {
  INSTANT
  DAILY
}

enum NotificationStatus {
  PENDING
  SENT
  DISMISSED
}

enum NotificationChannel {
  EMAIL
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  emailVerified           DateTime?
  passwordHash            String?
  name                    String?
  role                    Role                     @default(USER)
  notificationPreference  NotificationPreference?
  names                   Name[]
  notifications           Notification[]
  accounts                Account[]
  sessions                Session[]
  authenticators          Authenticator[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

model NotificationPreference {
  id          String                 @id @default(cuid())
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String                 @unique
  frequency   NotificationFrequency  @default(INSTANT)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model Name {
  id                String          @id @default(cuid())
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  label             String
  kana              String?
  normalizedLabel   String?
  normalizedKana    String?
  isActive          Boolean         @default(true)
  lastNotifiedAt    DateTime?
  notifications     Notification[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([userId])
  @@index([isActive])
}

model Obituary {
  id                String          @id @default(cuid())
  publishedOn       DateTime
  deceasedName      String
  deceasedKana      String?
  region            String?
  age               Int?
  sourceUrl         String?         @unique
  relatedNames      Json?
  extraContext      Json?
  notifications     Notification[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([publishedOn])
  @@index([deceasedName])
}

model Notification {
  id            String               @id @default(cuid())
  user          User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  name          Name                 @relation(fields: [nameId], references: [id], onDelete: Cascade)
  nameId        String
  obituary      Obituary             @relation(fields: [obituaryId], references: [id], onDelete: Cascade)
  obituaryId    String
  channel       NotificationChannel  @default(EMAIL)
  status        NotificationStatus   @default(PENDING)
  sentAt        DateTime?
  matchStrength Float?
  context       Json?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@unique([userId, nameId, obituaryId])
  @@index([status])
  @@index([sentAt])
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?  @db.Text
  oauth_token        String?  @db.Text
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Authenticator {
  credentialID        String   @id
  userId              String
  providerAccountId   String
  credentialPublicKey String
  counter             BigInt   @default(0)
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, providerAccountId])
}
